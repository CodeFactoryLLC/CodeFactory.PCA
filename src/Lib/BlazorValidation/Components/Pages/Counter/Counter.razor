@page "/counter"

<PageTitle>Counter</PageTitle>
<CounterController CheckStopNavigationChange="@PromptToAllowNavigationChangeAsync" @ref="Controller" />

<h1>Counter</h1>
<TelerikButton OnClick="@ShowSuccessNotification">Show Success</TelerikButton>
<StatusEditForm Model="@_info" DataModifiedStatusChanged="DataModifiedStatusChangedAsync" @ref = "CounterEditForm" >
<InputText @bind-Value="@_info.FirstName" DisplayName="First Name"/>
<InputText @bind-Value="@_info.LastName"  DisplayName="Last Name" />
</StatusEditForm>
<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private InfoTest _info = new InfoTest();

    [Inject]
    private INotificationService NotificationService { get; set; }


    private ICounterController Controller { get; set; }


    private StatusEditForm CounterEditForm { get; set; }

    private async Task PromptToAllowNavigationChangeAsync(NavigationCancelInfo context)
    {
        context.CancelNavigationChange = true;
    }

    private async Task ShowSuccessNotification(MouseEventArgs args)
    {
       await NotificationService.SuccessNotificationAsync("Success Test");

    }

    private async void IncrementCount()
    {
        currentCount++;

        var result = await Controller.SaveCounterValueAsync(currentCount);

        if (result) await CounterEditForm.SetDataUnmodifiedAsync();
    }


    public class InfoTest
    {

        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    private async Task DataModifiedStatusChangedAsync(EditFormDataStatus status)
    {

       await Controller.PromptForNavigationChangeAsync(status.IsModified);

    }
}
